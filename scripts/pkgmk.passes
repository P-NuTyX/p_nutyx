#!/bin/bash
#
#  pkgutils
# 
#  Copyright (c) 2000-2005 Per Liden
#  Copyright (c) 2006-2007 by CRUX team (http://crux.nu)
# 
#  This program is free software; you can redistribute it and/or modify
#  it under the terms of the GNU General Public License as published by
#  the Free Software Foundation; either version 2 of the License, or
#  (at your option) any later version.
#
#  This program is distributed in the hope that it will be useful,
#  but WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#  GNU General Public License for more details.
#
#  You should have received a copy of the GNU General Public License
#  along with this program; if not, write to the Free Software
#  Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, 
#  USA.
#

info() {
	echo "=======> $1"
}

warning() {
	info "WARNING: $1" >&2
}

error() {
	info "ERROR: $1" >&2
}

get_filename() {
	local FILE="`echo $1 | sed 's|^.*://.*/||g'`"

	if [ "$FILE" != "$1" ]; then
		FILE="$PKGMK_SOURCE_DIR/$FILE"
	fi

	echo $FILE
}

get_basename() {
	local FILE="`echo $1 | sed 's|^.*://.*/||g'`"
	echo $FILE
}

check_pkgfile() {
	if [ "`type -t build`" != "function" ]; then
		error "Function 'build' not specified in $PKGMK_PKGFILE."
		exit 1
	fi
}

check_directory() {
	if [ ! -d $1 ]; then
		error "Directory '$1' does not exist."
		exit 1
	elif [ ! -x $1 ] || [ ! -r $1 ]; then
		error "Directory '$1' not readable."
		exit 1
	fi
}
unpack_source() {
	local FILE LOCAL_FILENAME COMMAND
	
	for FILE in ${source[@]}; do
		LOCAL_FILENAME=`get_filename $FILE`
		case $LOCAL_FILENAME in
			*.tar.gz|*.tar.Z|*.tgz|*.tar.bz2|*.tbz2|*.tar.xz|*.txz|*.tar.lzma|*.zip|*.rpm)
				COMMAND="tar -p -o -C $SRC -xf $LOCAL_FILENAME" ;;
			*)
				COMMAND="cp $LOCAL_FILENAME $SRC" ;;
		esac

		echo "$COMMAND"

		$COMMAND

		if [ $? != 0 ]; then
			if [ "$PKGMK_KEEP_WORK" = "no" ]; then
				rm -rf $PKGMK_WORK_DIR
			fi
			error "Building '$TARGET' failed."
			exit 1
		fi
	done
}

build_package() {
	local BUILD_SUCCESSFUL="no"
	
	export PKG="/"
	export SRC="$PKGMK_WORK_DIR/src"
	umask 022
	
	cd $PKGMK_ROOT
	rm -rf $PKGMK_WORK_DIR
	mkdir -p $SRC
	

	if [ "$UID" == "0" ]; then
		error "Packages should NOT be built as root."
		exit 1
	fi
	
	info "Building '$TARGET'."
	
	unpack_source
	
	cd $SRC
	(set -e -x ; build)
	
	
	if [ $? = 0 ]; then
		BUILD_SUCCESSFUL="yes"

	fi
        if [ "$PKGMK_KEEP_WORK" = "no" ]; then
                rm -rf $PKGMK_WORK_DIR
        fi
	
	if [ "$BUILD_SUCCESSFUL" = "yes" ]; then
		info "Building '$TARGET' succeeded."
	fi
}

clean() {
	local FILE LOCAL_FILENAME
	
	if [ -f $TARGET ]; then
		info "Removing $TARGET"
		rm -f $TARGET
	fi
	
	for FILE in ${source[@]}; do
		LOCAL_FILENAME=`get_filename $FILE`
		if [ -e $LOCAL_FILENAME ] && [ "$LOCAL_FILENAME" != "$FILE" ]; then
			info "Removing $LOCAL_FILENAME"
			rm -f $LOCAL_FILENAME
		fi
	done
}

interrupted() {
	echo ""
	error "Interrupted."
	
	if [ "$PKGMK_KEEP_WORK" = "no" ]; then
		rm -rf $PKGMK_WORK_DIR
	fi
	
	exit 1
}

print_help() {
	echo "usage: `basename $PKGMK_COMMAND` [options]"
	echo "options:"
	echo "  -kw,  --keep-work           keep temporary working directory"
	echo "  -cf,  --config-file <file>  use alternative configuration file"
	echo "  -v,   --version             print version and exit "
	echo "  -h,   --help                print help and exit"
}
parse_options() {
	while [ "$1" ]; do
		case $1 in
			-kw|--keep-work)
				PKGMK_KEEP_WORK="yes" ;;
			-cf|--config-file)
				if [ ! "$2" ]; then
					echo "`basename $PKGMK_COMMAND`: option $1 requires an argument"
					exit 1
				fi
				PKGMK_CONFFILE="$2"
				shift ;;
			-v|--version)
				echo "`basename $PKGMK_COMMAND` $PKGMK_VERSION"
				exit 0 ;;
			-h|--help)
				print_help
				exit 0 ;;
			*)
				echo "`basename $PKGMK_COMMAND`: invalid option $1"
				exit 1 ;;
		esac
		shift
	done
}

main() {
	local FILE TARGET
	
	parse_options "$@"
	
	for FILE in $PKGMK_CONFFILE $PKGMK_PKGFILE ; do
		if [ ! -f $FILE ]; then
			error "File '$FILE' not found."
			exit 1
		fi
		. $FILE
	done
	
	check_directory "$PKGMK_SOURCE_DIR"
	check_directory "$PKGMK_PACKAGE_DIR"
	check_directory "`dirname $PKGMK_WORK_DIR`"
	
	check_pkgfile
	
	TARGET="$PKGMK_PACKAGE_DIR/$PKGMK_PKGFILE"
	
	if [ "$PKGMK_CLEAN" = "yes" ]; then
		clean
		exit 0
	fi
		build_package
	exit 0
}

trap "interrupted" SIGHUP SIGINT SIGQUIT SIGTERM

export LC_ALL=POSIX

readonly PKGMK_VERSION="0.0.1"
readonly PKGMK_COMMAND="$0"
readonly PKGMK_ROOT="$PWD"

PKGMK_CONFFILE="$HOME/config/pkgmk.conf"
PKGMK_PKGFILE="Pkgfile"
PKGMK_SOURCE_DIR="/mnt/lfs/sources"
PKGMK_PACKAGE_DIR="$PWD"
PKGMK_WORK_DIR="/tmp/work"

PKGMK_FORCE="no"
PKGMK_KEEP_WORK="no"
PKGMK_NO_STRIP="no"
PKGMK_CLEAN="no"
main "$@"

# End of file

